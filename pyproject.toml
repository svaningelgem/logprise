[tool.poetry]
name = "logprise"
version = "1.0.1"
description = "A package integrating loguru and apprise for logging and notifications"
authors = ["Steven Van Ingelgem <steven@vaningelgem.be>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/svaningelgem/logprise"
packages = [
    { include = "logprise" }
]

[tool.poetry.dependencies]
python = ">=3.10"
loguru = "*"
apprise = "*"
urllib3 = "<2"  # Because else poetry won't work anymore!

[tool.poetry.group.dev.dependencies]
pytest-cov = "*"
pytest-mock = "*"
ruff = "*"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
# Enable pycodestyle ('E'), pyflakes ('F'), pylint ('PL'), isort ('I'), pep8-naming ('N'),
# flake8-bugbear ('B'), flake8-comprehensions ('C4'),
# flake8-quotes ('Q'), flake8-debugger ('T10'), mccabe ('C90'),
# flake8-type-checking ('TCH'), ruff specific rules ('RUF')
# flake8-pyi ('PYI')
select = ["E", "F", "PL", "I", "N", "B", "C4", "Q", "T10", "C90", "TCH", "RUF", "UP", "ANN", "PYI"]

# Ignore specific rules
ignore = [
    "PLR0913",  # Too many arguments to function call
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120

fix = true
unsafe-fixes = true

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ANN", "PLR2004"]  # Ignore type annotations and magic numbers in tests

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["minecraft_log_watcher"]
combine-as-imports = true
lines-after-imports = 2

#[tool.ruff.lint.flake8-quotes]
#docstring-quotes = "double"
#inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pylint]
max-args = 8  # Maximum number of arguments to a function

[tool.ruff.format]
# Like Black, use double quotes for docstrings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.coverage.run]
source = ["minecraft_log_watcher"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "@abc.abstractmethod"
]
show_missing = true