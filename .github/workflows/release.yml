name: Publish to PyPI

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]'
      - 'v[0-9]+.[0-9]+.[0-9]'
      - 'V[0-9]+.[0-9]+.[0-9]'

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Set version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}  # Extract the tag (e.g., v1.0.0 or V2.3.4)
          VERSION=${VERSION#v}              # Remove 'v' prefix if present
          VERSION=${VERSION#V}              # Remove 'V' prefix if present
          echo "Setting version to $VERSION"
          poetry version $VERSION

      - name: Run ruff format check
        continue-on-error: true
        id: ruff-format
        run: poetry run ruff format --check --diff .

      - name: Run ruff lint check
        continue-on-error: true
        id: ruff-lint
        run: poetry run ruff check --diff .

      - name: Run consistency checks between stub & module
        continue-on-error: true
        id: stubtest
        env:
          PYTHONPATH: "."
        run: poetry run stubtest logprise

      - name: Running mypy
        continue-on-error: true
        id: mypy
        env:
          PYTHONPATH: "."
        run: poetry run mypy .

      - name: Run tests with coverage
        continue-on-error: true
        id: pytest
        run: poetry run pytest --cov=logprise --cov-report=xml

      - name: Check if any quality check failed
        if: |
          steps.ruff-format.outcome == 'failure' ||
          steps.ruff-lint.outcome == 'failure' ||
          steps.stubtest.outcome == 'failure' ||
          steps.mypy.outcome == 'failure' ||
          steps.pytest.outcome == 'failure'
        run: |
          echo "At least one quality check failed"
          exit 1

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build packages
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
